#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pharma_Reboot
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCatagoryTable(CatagoryTable instance);
    partial void UpdateCatagoryTable(CatagoryTable instance);
    partial void DeleteCatagoryTable(CatagoryTable instance);
    partial void InsertSalesTable(SalesTable instance);
    partial void UpdateSalesTable(SalesTable instance);
    partial void DeleteSalesTable(SalesTable instance);
    partial void InsertOrderTable(OrderTable instance);
    partial void UpdateOrderTable(OrderTable instance);
    partial void DeleteOrderTable(OrderTable instance);
    partial void InsertVendorTable(VendorTable instance);
    partial void UpdateVendorTable(VendorTable instance);
    partial void DeleteVendorTable(VendorTable instance);
    partial void InsertUserLogIN(UserLogIN instance);
    partial void UpdateUserLogIN(UserLogIN instance);
    partial void DeleteUserLogIN(UserLogIN instance);
    partial void InsertDrugTable(DrugTable instance);
    partial void UpdateDrugTable(DrugTable instance);
    partial void DeleteDrugTable(DrugTable instance);
    partial void InsertSessionTable(SessionTable instance);
    partial void UpdateSessionTable(SessionTable instance);
    partial void DeleteSessionTable(SessionTable instance);
    partial void InsertPaymentTable(PaymentTable instance);
    partial void UpdatePaymentTable(PaymentTable instance);
    partial void DeletePaymentTable(PaymentTable instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Pharma_Reboot.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CatagoryTable> CatagoryTables
		{
			get
			{
				return this.GetTable<CatagoryTable>();
			}
		}
		
		public System.Data.Linq.Table<SalesTable> SalesTables
		{
			get
			{
				return this.GetTable<SalesTable>();
			}
		}
		
		public System.Data.Linq.Table<OrderTable> OrderTables
		{
			get
			{
				return this.GetTable<OrderTable>();
			}
		}
		
		public System.Data.Linq.Table<VendorTable> VendorTables
		{
			get
			{
				return this.GetTable<VendorTable>();
			}
		}
		
		public System.Data.Linq.Table<UserLogIN> UserLogINs
		{
			get
			{
				return this.GetTable<UserLogIN>();
			}
		}
		
		public System.Data.Linq.Table<DrugTable> DrugTables
		{
			get
			{
				return this.GetTable<DrugTable>();
			}
		}
		
		public System.Data.Linq.Table<SessionTable> SessionTables
		{
			get
			{
				return this.GetTable<SessionTable>();
			}
		}
		
		public System.Data.Linq.Table<PaymentTable> PaymentTables
		{
			get
			{
				return this.GetTable<PaymentTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatagoryTable")]
	public partial class CatagoryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<SalesTable> _SalesTables;
		
		private EntitySet<DrugTable> _DrugTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CatagoryTable()
		{
			this._SalesTables = new EntitySet<SalesTable>(new Action<SalesTable>(this.attach_SalesTables), new Action<SalesTable>(this.detach_SalesTables));
			this._DrugTables = new EntitySet<DrugTable>(new Action<DrugTable>(this.attach_DrugTables), new Action<DrugTable>(this.detach_DrugTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatagoryTable_SalesTable", Storage="_SalesTables", ThisKey="Id", OtherKey="CatagoryID")]
		public EntitySet<SalesTable> SalesTables
		{
			get
			{
				return this._SalesTables;
			}
			set
			{
				this._SalesTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatagoryTable_DrugTable", Storage="_DrugTables", ThisKey="Id", OtherKey="CatagoryId")]
		public EntitySet<DrugTable> DrugTables
		{
			get
			{
				return this._DrugTables;
			}
			set
			{
				this._DrugTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesTables(SalesTable entity)
		{
			this.SendPropertyChanging();
			entity.CatagoryTable = this;
		}
		
		private void detach_SalesTables(SalesTable entity)
		{
			this.SendPropertyChanging();
			entity.CatagoryTable = null;
		}
		
		private void attach_DrugTables(DrugTable entity)
		{
			this.SendPropertyChanging();
			entity.CatagoryTable = this;
		}
		
		private void detach_DrugTables(DrugTable entity)
		{
			this.SendPropertyChanging();
			entity.CatagoryTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesTable")]
	public partial class SalesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DrugID;
		
		private string _DrugName;
		
		private System.Nullable<int> _CatagoryID;
		
		private System.Nullable<int> _StaffID;
		
		private System.Nullable<int> _QuantitySold;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _Profit_Loss;
		
		private EntityRef<CatagoryTable> _CatagoryTable;
		
		private EntityRef<UserLogIN> _UserLogIN;
		
		private EntityRef<DrugTable> _DrugTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrugIDChanging(System.Nullable<int> value);
    partial void OnDrugIDChanged();
    partial void OnDrugNameChanging(string value);
    partial void OnDrugNameChanged();
    partial void OnCatagoryIDChanging(System.Nullable<int> value);
    partial void OnCatagoryIDChanged();
    partial void OnStaffIDChanging(System.Nullable<int> value);
    partial void OnStaffIDChanged();
    partial void OnQuantitySoldChanging(System.Nullable<int> value);
    partial void OnQuantitySoldChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnProfit_LossChanging(System.Nullable<int> value);
    partial void OnProfit_LossChanged();
    #endregion
		
		public SalesTable()
		{
			this._CatagoryTable = default(EntityRef<CatagoryTable>);
			this._UserLogIN = default(EntityRef<UserLogIN>);
			this._DrugTable = default(EntityRef<DrugTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugID", DbType="Int")]
		public System.Nullable<int> DrugID
		{
			get
			{
				return this._DrugID;
			}
			set
			{
				if ((this._DrugID != value))
				{
					if (this._DrugTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugIDChanging(value);
					this.SendPropertyChanging();
					this._DrugID = value;
					this.SendPropertyChanged("DrugID");
					this.OnDrugIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugName", DbType="VarChar(50)")]
		public string DrugName
		{
			get
			{
				return this._DrugName;
			}
			set
			{
				if ((this._DrugName != value))
				{
					this.OnDrugNameChanging(value);
					this.SendPropertyChanging();
					this._DrugName = value;
					this.SendPropertyChanged("DrugName");
					this.OnDrugNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatagoryID", DbType="Int")]
		public System.Nullable<int> CatagoryID
		{
			get
			{
				return this._CatagoryID;
			}
			set
			{
				if ((this._CatagoryID != value))
				{
					if (this._CatagoryTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatagoryIDChanging(value);
					this.SendPropertyChanging();
					this._CatagoryID = value;
					this.SendPropertyChanged("CatagoryID");
					this.OnCatagoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int")]
		public System.Nullable<int> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._UserLogIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantitySold", DbType="Int")]
		public System.Nullable<int> QuantitySold
		{
			get
			{
				return this._QuantitySold;
			}
			set
			{
				if ((this._QuantitySold != value))
				{
					this.OnQuantitySoldChanging(value);
					this.SendPropertyChanging();
					this._QuantitySold = value;
					this.SendPropertyChanged("QuantitySold");
					this.OnQuantitySoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Profit/Loss]", Storage="_Profit_Loss", DbType="Int")]
		public System.Nullable<int> Profit_Loss
		{
			get
			{
				return this._Profit_Loss;
			}
			set
			{
				if ((this._Profit_Loss != value))
				{
					this.OnProfit_LossChanging(value);
					this.SendPropertyChanging();
					this._Profit_Loss = value;
					this.SendPropertyChanged("Profit_Loss");
					this.OnProfit_LossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatagoryTable_SalesTable", Storage="_CatagoryTable", ThisKey="CatagoryID", OtherKey="Id", IsForeignKey=true)]
		public CatagoryTable CatagoryTable
		{
			get
			{
				return this._CatagoryTable.Entity;
			}
			set
			{
				CatagoryTable previousValue = this._CatagoryTable.Entity;
				if (((previousValue != value) 
							|| (this._CatagoryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatagoryTable.Entity = null;
						previousValue.SalesTables.Remove(this);
					}
					this._CatagoryTable.Entity = value;
					if ((value != null))
					{
						value.SalesTables.Add(this);
						this._CatagoryID = value.Id;
					}
					else
					{
						this._CatagoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CatagoryTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_SalesTable", Storage="_UserLogIN", ThisKey="StaffID", OtherKey="Id", IsForeignKey=true)]
		public UserLogIN UserLogIN
		{
			get
			{
				return this._UserLogIN.Entity;
			}
			set
			{
				UserLogIN previousValue = this._UserLogIN.Entity;
				if (((previousValue != value) 
							|| (this._UserLogIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLogIN.Entity = null;
						previousValue.SalesTables.Remove(this);
					}
					this._UserLogIN.Entity = value;
					if ((value != null))
					{
						value.SalesTables.Add(this);
						this._StaffID = value.Id;
					}
					else
					{
						this._StaffID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserLogIN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugTable_SalesTable", Storage="_DrugTable", ThisKey="DrugID", OtherKey="Id", IsForeignKey=true)]
		public DrugTable DrugTable
		{
			get
			{
				return this._DrugTable.Entity;
			}
			set
			{
				DrugTable previousValue = this._DrugTable.Entity;
				if (((previousValue != value) 
							|| (this._DrugTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugTable.Entity = null;
						previousValue.SalesTables.Remove(this);
					}
					this._DrugTable.Entity = value;
					if ((value != null))
					{
						value.SalesTables.Add(this);
						this._DrugID = value.Id;
					}
					else
					{
						this._DrugID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DrugTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTable")]
	public partial class OrderTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DrugID;
		
		private string _DrugName;
		
		private System.Nullable<int> _QuantityToAdd;
		
		private System.Nullable<int> _AdminID;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private System.Nullable<System.DateTime> _OrderReceiveDate;
		
		private System.Nullable<int> _VendorID;
		
		private string _OrderStatus;
		
		private EntityRef<VendorTable> _VendorTable;
		
		private EntityRef<UserLogIN> _UserLogIN;
		
		private EntityRef<DrugTable> _DrugTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrugIDChanging(System.Nullable<int> value);
    partial void OnDrugIDChanged();
    partial void OnDrugNameChanging(string value);
    partial void OnDrugNameChanged();
    partial void OnQuantityToAddChanging(System.Nullable<int> value);
    partial void OnQuantityToAddChanged();
    partial void OnAdminIDChanging(System.Nullable<int> value);
    partial void OnAdminIDChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnOrderReceiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderReceiveDateChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    partial void OnOrderStatusChanging(string value);
    partial void OnOrderStatusChanged();
    #endregion
		
		public OrderTable()
		{
			this._VendorTable = default(EntityRef<VendorTable>);
			this._UserLogIN = default(EntityRef<UserLogIN>);
			this._DrugTable = default(EntityRef<DrugTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugID", DbType="Int")]
		public System.Nullable<int> DrugID
		{
			get
			{
				return this._DrugID;
			}
			set
			{
				if ((this._DrugID != value))
				{
					if (this._DrugTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugIDChanging(value);
					this.SendPropertyChanging();
					this._DrugID = value;
					this.SendPropertyChanged("DrugID");
					this.OnDrugIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugName", DbType="VarChar(50)")]
		public string DrugName
		{
			get
			{
				return this._DrugName;
			}
			set
			{
				if ((this._DrugName != value))
				{
					this.OnDrugNameChanging(value);
					this.SendPropertyChanging();
					this._DrugName = value;
					this.SendPropertyChanged("DrugName");
					this.OnDrugNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityToAdd", DbType="Int")]
		public System.Nullable<int> QuantityToAdd
		{
			get
			{
				return this._QuantityToAdd;
			}
			set
			{
				if ((this._QuantityToAdd != value))
				{
					this.OnQuantityToAddChanging(value);
					this.SendPropertyChanging();
					this._QuantityToAdd = value;
					this.SendPropertyChanged("QuantityToAdd");
					this.OnQuantityToAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int")]
		public System.Nullable<int> AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._UserLogIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderReceiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderReceiveDate
		{
			get
			{
				return this._OrderReceiveDate;
			}
			set
			{
				if ((this._OrderReceiveDate != value))
				{
					this.OnOrderReceiveDateChanging(value);
					this.SendPropertyChanging();
					this._OrderReceiveDate = value;
					this.SendPropertyChanged("OrderReceiveDate");
					this.OnOrderReceiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._VendorTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="VarChar(50)")]
		public string OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VendorTable_OrderTable", Storage="_VendorTable", ThisKey="VendorID", OtherKey="Id", IsForeignKey=true)]
		public VendorTable VendorTable
		{
			get
			{
				return this._VendorTable.Entity;
			}
			set
			{
				VendorTable previousValue = this._VendorTable.Entity;
				if (((previousValue != value) 
							|| (this._VendorTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VendorTable.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._VendorTable.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._VendorID = value.Id;
					}
					else
					{
						this._VendorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("VendorTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_OrderTable", Storage="_UserLogIN", ThisKey="AdminID", OtherKey="Id", IsForeignKey=true)]
		public UserLogIN UserLogIN
		{
			get
			{
				return this._UserLogIN.Entity;
			}
			set
			{
				UserLogIN previousValue = this._UserLogIN.Entity;
				if (((previousValue != value) 
							|| (this._UserLogIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLogIN.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._UserLogIN.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._AdminID = value.Id;
					}
					else
					{
						this._AdminID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserLogIN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugTable_OrderTable", Storage="_DrugTable", ThisKey="DrugID", OtherKey="Id", IsForeignKey=true)]
		public DrugTable DrugTable
		{
			get
			{
				return this._DrugTable.Entity;
			}
			set
			{
				DrugTable previousValue = this._DrugTable.Entity;
				if (((previousValue != value) 
							|| (this._DrugTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugTable.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._DrugTable.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._DrugID = value.Id;
					}
					else
					{
						this._DrugID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DrugTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VendorTable")]
	public partial class VendorTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Email;
		
		private EntitySet<OrderTable> _OrderTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public VendorTable()
		{
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VendorTable_OrderTable", Storage="_OrderTables", ThisKey="Id", OtherKey="VendorID")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.VendorTable = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.VendorTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLogIN")]
	public partial class UserLogIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _userName;
		
		private string _password;
		
		private string _role;
		
		private string _FullName;
		
		private System.Nullable<System.DateTime> _DateEmployed;
		
		private System.Nullable<int> _Salary;
		
		private string _PicLink;
		
		private System.Nullable<System.DateTime> _LastLoginTime;
		
		private System.Nullable<System.DateTime> _LastLogoutTime;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Status;
		
		private EntitySet<SalesTable> _SalesTables;
		
		private EntitySet<OrderTable> _OrderTables;
		
		private EntitySet<SessionTable> _SessionTables;
		
		private EntitySet<PaymentTable> _PaymentTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnDateEmployedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEmployedChanged();
    partial void OnSalaryChanging(System.Nullable<int> value);
    partial void OnSalaryChanged();
    partial void OnPicLinkChanging(string value);
    partial void OnPicLinkChanged();
    partial void OnLastLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginTimeChanged();
    partial void OnLastLogoutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLogoutTimeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public UserLogIN()
		{
			this._SalesTables = new EntitySet<SalesTable>(new Action<SalesTable>(this.attach_SalesTables), new Action<SalesTable>(this.detach_SalesTables));
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			this._SessionTables = new EntitySet<SessionTable>(new Action<SessionTable>(this.attach_SessionTables), new Action<SessionTable>(this.detach_SessionTables));
			this._PaymentTables = new EntitySet<PaymentTable>(new Action<PaymentTable>(this.attach_PaymentTables), new Action<PaymentTable>(this.detach_PaymentTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(50)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(50)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEmployed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEmployed
		{
			get
			{
				return this._DateEmployed;
			}
			set
			{
				if ((this._DateEmployed != value))
				{
					this.OnDateEmployedChanging(value);
					this.SendPropertyChanging();
					this._DateEmployed = value;
					this.SendPropertyChanged("DateEmployed");
					this.OnDateEmployedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Int")]
		public System.Nullable<int> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicLink", DbType="VarChar(MAX)")]
		public string PicLink
		{
			get
			{
				return this._PicLink;
			}
			set
			{
				if ((this._PicLink != value))
				{
					this.OnPicLinkChanging(value);
					this.SendPropertyChanging();
					this._PicLink = value;
					this.SendPropertyChanged("PicLink");
					this.OnPicLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginTime
		{
			get
			{
				return this._LastLoginTime;
			}
			set
			{
				if ((this._LastLoginTime != value))
				{
					this.OnLastLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LastLoginTime = value;
					this.SendPropertyChanged("LastLoginTime");
					this.OnLastLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogoutTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogoutTime
		{
			get
			{
				return this._LastLogoutTime;
			}
			set
			{
				if ((this._LastLogoutTime != value))
				{
					this.OnLastLogoutTimeChanging(value);
					this.SendPropertyChanging();
					this._LastLogoutTime = value;
					this.SendPropertyChanged("LastLogoutTime");
					this.OnLastLogoutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_SalesTable", Storage="_SalesTables", ThisKey="Id", OtherKey="StaffID")]
		public EntitySet<SalesTable> SalesTables
		{
			get
			{
				return this._SalesTables;
			}
			set
			{
				this._SalesTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_OrderTable", Storage="_OrderTables", ThisKey="Id", OtherKey="AdminID")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_SessionTable", Storage="_SessionTables", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<SessionTable> SessionTables
		{
			get
			{
				return this._SessionTables;
			}
			set
			{
				this._SessionTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_PaymentTable", Storage="_PaymentTables", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<PaymentTable> PaymentTables
		{
			get
			{
				return this._PaymentTables;
			}
			set
			{
				this._PaymentTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesTables(SalesTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = this;
		}
		
		private void detach_SalesTables(SalesTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = null;
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = null;
		}
		
		private void attach_SessionTables(SessionTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = this;
		}
		
		private void detach_SessionTables(SessionTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = null;
		}
		
		private void attach_PaymentTables(PaymentTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = this;
		}
		
		private void detach_PaymentTables(PaymentTable entity)
		{
			this.SendPropertyChanging();
			entity.UserLogIN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugTable")]
	public partial class DrugTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _CatagoryId;
		
		private int _BatchNo;
		
		private System.Nullable<System.DateTime> _ExpiredDate;
		
		private System.Nullable<int> _QuantityBought;
		
		private System.Nullable<int> _QuantitySold;
		
		private System.Nullable<int> _SellingPricePerUnit;
		
		private System.Nullable<int> _BuyingCostPerUnit;
		
		private string _Status;
		
		private EntitySet<SalesTable> _SalesTables;
		
		private EntitySet<OrderTable> _OrderTables;
		
		private EntityRef<CatagoryTable> _CatagoryTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCatagoryIdChanging(System.Nullable<int> value);
    partial void OnCatagoryIdChanged();
    partial void OnBatchNoChanging(int value);
    partial void OnBatchNoChanged();
    partial void OnExpiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredDateChanged();
    partial void OnQuantityBoughtChanging(System.Nullable<int> value);
    partial void OnQuantityBoughtChanged();
    partial void OnQuantitySoldChanging(System.Nullable<int> value);
    partial void OnQuantitySoldChanged();
    partial void OnSellingPricePerUnitChanging(System.Nullable<int> value);
    partial void OnSellingPricePerUnitChanged();
    partial void OnBuyingCostPerUnitChanging(System.Nullable<int> value);
    partial void OnBuyingCostPerUnitChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public DrugTable()
		{
			this._SalesTables = new EntitySet<SalesTable>(new Action<SalesTable>(this.attach_SalesTables), new Action<SalesTable>(this.detach_SalesTables));
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			this._CatagoryTable = default(EntityRef<CatagoryTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatagoryId", DbType="Int")]
		public System.Nullable<int> CatagoryId
		{
			get
			{
				return this._CatagoryId;
			}
			set
			{
				if ((this._CatagoryId != value))
				{
					if (this._CatagoryTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatagoryIdChanging(value);
					this.SendPropertyChanging();
					this._CatagoryId = value;
					this.SendPropertyChanged("CatagoryId");
					this.OnCatagoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchNo", DbType="Int NOT NULL")]
		public int BatchNo
		{
			get
			{
				return this._BatchNo;
			}
			set
			{
				if ((this._BatchNo != value))
				{
					this.OnBatchNoChanging(value);
					this.SendPropertyChanging();
					this._BatchNo = value;
					this.SendPropertyChanged("BatchNo");
					this.OnBatchNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this.OnExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDate = value;
					this.SendPropertyChanged("ExpiredDate");
					this.OnExpiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityBought", DbType="Int")]
		public System.Nullable<int> QuantityBought
		{
			get
			{
				return this._QuantityBought;
			}
			set
			{
				if ((this._QuantityBought != value))
				{
					this.OnQuantityBoughtChanging(value);
					this.SendPropertyChanging();
					this._QuantityBought = value;
					this.SendPropertyChanged("QuantityBought");
					this.OnQuantityBoughtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantitySold", DbType="Int")]
		public System.Nullable<int> QuantitySold
		{
			get
			{
				return this._QuantitySold;
			}
			set
			{
				if ((this._QuantitySold != value))
				{
					this.OnQuantitySoldChanging(value);
					this.SendPropertyChanging();
					this._QuantitySold = value;
					this.SendPropertyChanged("QuantitySold");
					this.OnQuantitySoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPricePerUnit", DbType="Int")]
		public System.Nullable<int> SellingPricePerUnit
		{
			get
			{
				return this._SellingPricePerUnit;
			}
			set
			{
				if ((this._SellingPricePerUnit != value))
				{
					this.OnSellingPricePerUnitChanging(value);
					this.SendPropertyChanging();
					this._SellingPricePerUnit = value;
					this.SendPropertyChanged("SellingPricePerUnit");
					this.OnSellingPricePerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyingCostPerUnit", DbType="Int")]
		public System.Nullable<int> BuyingCostPerUnit
		{
			get
			{
				return this._BuyingCostPerUnit;
			}
			set
			{
				if ((this._BuyingCostPerUnit != value))
				{
					this.OnBuyingCostPerUnitChanging(value);
					this.SendPropertyChanging();
					this._BuyingCostPerUnit = value;
					this.SendPropertyChanged("BuyingCostPerUnit");
					this.OnBuyingCostPerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugTable_SalesTable", Storage="_SalesTables", ThisKey="Id", OtherKey="DrugID")]
		public EntitySet<SalesTable> SalesTables
		{
			get
			{
				return this._SalesTables;
			}
			set
			{
				this._SalesTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugTable_OrderTable", Storage="_OrderTables", ThisKey="Id", OtherKey="DrugID")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatagoryTable_DrugTable", Storage="_CatagoryTable", ThisKey="CatagoryId", OtherKey="Id", IsForeignKey=true)]
		public CatagoryTable CatagoryTable
		{
			get
			{
				return this._CatagoryTable.Entity;
			}
			set
			{
				CatagoryTable previousValue = this._CatagoryTable.Entity;
				if (((previousValue != value) 
							|| (this._CatagoryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatagoryTable.Entity = null;
						previousValue.DrugTables.Remove(this);
					}
					this._CatagoryTable.Entity = value;
					if ((value != null))
					{
						value.DrugTables.Add(this);
						this._CatagoryId = value.Id;
					}
					else
					{
						this._CatagoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CatagoryTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesTables(SalesTable entity)
		{
			this.SendPropertyChanging();
			entity.DrugTable = this;
		}
		
		private void detach_SalesTables(SalesTable entity)
		{
			this.SendPropertyChanging();
			entity.DrugTable = null;
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.DrugTable = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.DrugTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionTable")]
	public partial class SessionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserID;
		
		private System.DateTime _LogInTime;
		
		private System.DateTime _LogOutTime;
		
		private EntityRef<UserLogIN> _UserLogIN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLogInTimeChanging(System.DateTime value);
    partial void OnLogInTimeChanged();
    partial void OnLogOutTimeChanging(System.DateTime value);
    partial void OnLogOutTimeChanged();
    #endregion
		
		public SessionTable()
		{
			this._UserLogIN = default(EntityRef<UserLogIN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserLogIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogInTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogInTime
		{
			get
			{
				return this._LogInTime;
			}
			set
			{
				if ((this._LogInTime != value))
				{
					this.OnLogInTimeChanging(value);
					this.SendPropertyChanging();
					this._LogInTime = value;
					this.SendPropertyChanged("LogInTime");
					this.OnLogInTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogOutTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogOutTime
		{
			get
			{
				return this._LogOutTime;
			}
			set
			{
				if ((this._LogOutTime != value))
				{
					this.OnLogOutTimeChanging(value);
					this.SendPropertyChanging();
					this._LogOutTime = value;
					this.SendPropertyChanged("LogOutTime");
					this.OnLogOutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_SessionTable", Storage="_UserLogIN", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		public UserLogIN UserLogIN
		{
			get
			{
				return this._UserLogIN.Entity;
			}
			set
			{
				UserLogIN previousValue = this._UserLogIN.Entity;
				if (((previousValue != value) 
							|| (this._UserLogIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLogIN.Entity = null;
						previousValue.SessionTables.Remove(this);
					}
					this._UserLogIN.Entity = value;
					if ((value != null))
					{
						value.SessionTables.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserLogIN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentTable")]
	public partial class PaymentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<System.DateTime> _DateOfPayment;
		
		private System.Nullable<int> _PaymentAmount;
		
		private System.Nullable<int> _ExtraBonus;
		
		private EntityRef<UserLogIN> _UserLogIN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnDateOfPaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfPaymentChanged();
    partial void OnPaymentAmountChanging(System.Nullable<int> value);
    partial void OnPaymentAmountChanged();
    partial void OnExtraBonusChanging(System.Nullable<int> value);
    partial void OnExtraBonusChanged();
    #endregion
		
		public PaymentTable()
		{
			this._UserLogIN = default(EntityRef<UserLogIN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserLogIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPayment", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfPayment
		{
			get
			{
				return this._DateOfPayment;
			}
			set
			{
				if ((this._DateOfPayment != value))
				{
					this.OnDateOfPaymentChanging(value);
					this.SendPropertyChanging();
					this._DateOfPayment = value;
					this.SendPropertyChanged("DateOfPayment");
					this.OnDateOfPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentAmount", DbType="Int")]
		public System.Nullable<int> PaymentAmount
		{
			get
			{
				return this._PaymentAmount;
			}
			set
			{
				if ((this._PaymentAmount != value))
				{
					this.OnPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentAmount = value;
					this.SendPropertyChanged("PaymentAmount");
					this.OnPaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraBonus", DbType="Int")]
		public System.Nullable<int> ExtraBonus
		{
			get
			{
				return this._ExtraBonus;
			}
			set
			{
				if ((this._ExtraBonus != value))
				{
					this.OnExtraBonusChanging(value);
					this.SendPropertyChanging();
					this._ExtraBonus = value;
					this.SendPropertyChanged("ExtraBonus");
					this.OnExtraBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLogIN_PaymentTable", Storage="_UserLogIN", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public UserLogIN UserLogIN
		{
			get
			{
				return this._UserLogIN.Entity;
			}
			set
			{
				UserLogIN previousValue = this._UserLogIN.Entity;
				if (((previousValue != value) 
							|| (this._UserLogIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLogIN.Entity = null;
						previousValue.PaymentTables.Remove(this);
					}
					this._UserLogIN.Entity = value;
					if ((value != null))
					{
						value.PaymentTables.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserLogIN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
